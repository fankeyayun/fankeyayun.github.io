<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot传文件到腾讯云存储</title>
    <url>/2019/12/02/spring%20boot%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="string">腾讯云</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.qcloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;cos_api&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;5.6.8&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;exclusions&gt;</span></span><br><span class="line">        <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">    <span class="string">&lt;/exclusions&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#腾讯云地址 </span><br><span class="line">tencent:</span><br><span class="line">  path: https:<span class="comment">//images-12048382642.cos.ap-guangzhou.myqcloud.com</span></span><br></pre></td></tr></table></figure>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bk.cloudstorage.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.COSClient;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.ClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.BasicCOSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.COSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.COSCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.exception.CosClientException;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.exception.CosServiceException;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.GetObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.ObjectMetadata;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.region.Region;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TencentUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此处填写的存储桶名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String bucketName = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//secretId</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SecretId = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//SecretKey</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SecretKey = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 初始化用户身份信息(secretId, secretKey，可在腾讯云后台中的API密钥管理中查看！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> COSCredentials cred = <span class="keyword">new</span> BasicCOSCredentials(SecretId,SecretKey);</span><br><span class="line">    <span class="comment">//// 2 设置bucket的区域, COS地域的简称请参照</span></span><br><span class="line">    <span class="comment">//    // https://cloud.tencent.com/document/product/436/6224，根据自己创建的存储桶选择地区</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientConfig clientConfig = <span class="keyword">new</span> ClientConfig(<span class="keyword">new</span> Region(<span class="string">"ap-guangzhou"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单文件上传, 最大支持 5 GB, 适用于小文件上传, 建议 20 M 以下的文件使用该接口 大文件上传请参照 API 文档高级 API 上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localfile 要上传的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadfile</span><span class="params">(File localfile,String pathPrefix)</span></span>&#123;</span><br><span class="line">        COSClient cosClient = <span class="keyword">new</span> COSClient(cred,clientConfig);</span><br><span class="line">        String fileName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileName =localfile.getName();</span><br><span class="line">            String subString = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="comment">// 指定要上传到 COS 上的路径</span></span><br><span class="line">            fileName = pathPrefix+<span class="string">"/"</span>+random.nextInt(<span class="number">10000</span>)+System.currentTimeMillis()+subString;</span><br><span class="line">            PutObjectRequest putObjectRequest = <span class="keyword">new</span> PutObjectRequest(bucketName,fileName,localfile);</span><br><span class="line">            PutObjectResult putObjectResult = cosClient.putObject(putObjectRequest);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭客户端(关闭后台线程)</span></span><br><span class="line">            cosClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 生成cos客户端</span></span><br><span class="line">        COSClient cosClient = <span class="keyword">new</span> COSClient(cred,clientConfig);</span><br><span class="line">        <span class="comment">//要下载的文件路径和名称</span></span><br><span class="line">        String key = <span class="string">"down"</span>;</span><br><span class="line">        <span class="comment">// 指定文件的存储路径</span></span><br><span class="line">        File downFile = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 指定要下载的文件所在的 bucket 和对象键</span></span><br><span class="line">        GetObjectRequest getObjectRequest = <span class="keyword">new</span> GetObjectRequest(bucketName,key);</span><br><span class="line">        ObjectMetadata down = cosClient.getObject(getObjectRequest,downFile);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletefile</span><span class="params">(String key)</span> <span class="keyword">throws</span> CosClientException, CosServiceException </span>&#123;</span><br><span class="line">        <span class="comment">// 生成cos客户端</span></span><br><span class="line">        COSClient cosclient = <span class="keyword">new</span> COSClient(cred, clientConfig);</span><br><span class="line">        <span class="comment">// 指定要删除的 bucket 和路径</span></span><br><span class="line">        cosclient.deleteObject(bucketName, key);</span><br><span class="line">        <span class="comment">// 关闭客户端(关闭后台线程)</span></span><br><span class="line">        cosclient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://console.cloud.tencent.com/cos5/bucket" target="_blank" rel="noopener">腾讯云存储地址</a><br><img src="https://img-blog.csdnimg.cn/20191206214532241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NIRU5HWFVZVUFOMDk=,size_16,color_FFFFFF,t_70" alt="存储桶名称以及所属地域相应的配置在工具里"><br><a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noopener">密钥地址</a><br><img src="https://img-blog.csdnimg.cn/20191206214833199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NIRU5HWFVZVUFOMDk=,size_16,color_FFFFFF,t_70" alt="SecretId以及SecretKey配置工具里"></p>
<h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bk.cloudstorage.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bk.cloudstorage.util.TencentCOS;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">imageUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;tencent.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String IMAGE_PATH;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile mulipartFilet,</span></span><br><span class="line"><span class="function">                         @<span class="title">RequestParam</span><span class="params">(<span class="string">"username"</span>)</span> String username, Model model) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fh=<span class="string">""</span>;</span><br><span class="line">        String fileName = mulipartFilet.getOriginalFilename();</span><br><span class="line">        <span class="comment">//判断有无后缀</span></span><br><span class="line">        <span class="keyword">if</span> (fileName.lastIndexOf(<span class="string">"."</span>)&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传图片格式不正确!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取文件后缀</span></span><br><span class="line">        String prefix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!prefix.equalsIgnoreCase(<span class="string">".jpg"</span>)&amp;&amp;!prefix.equalsIgnoreCase(<span class="string">".jpeg"</span>)</span><br><span class="line">        &amp;&amp; !prefix.equalsIgnoreCase(<span class="string">".svg"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传格式不正确!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用uuid作为文件名，防止生成的临时文件重复</span></span><br><span class="line">        <span class="keyword">final</span> File excelFile =File.createTempFile(<span class="string">"imagesFile-"</span> + System.currentTimeMillis(), prefix);</span><br><span class="line">        <span class="comment">//将Multifile转换成File</span></span><br><span class="line">        mulipartFilet.transferTo(excelFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用腾讯云工具上传文件</span></span><br><span class="line">        String imageName = TencentCOS.uploadfile(excelFile, <span class="string">"avatar"</span>);</span><br><span class="line">        <span class="comment">//存入图片名称，用于网页显示</span></span><br><span class="line">       <span class="comment">// model.addAttribute("imageName", imageName);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功！"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除临时文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files 临时文件，可变参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(File... files)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>单元测试注解的原理</title>
    <url>/2019/11/28/%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>  使用@Test对testExcute()方法进行注解，该注解本身不做任何事情，但是编译器要确保在其构造路径上必须有@Test注解的定义。例子中通过反射机制来运行testExecute()方法的工具。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotations;</span><br><span class="line"><span class="keyword">import</span> net.mindview.atunit.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testable</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"Executing.."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>&#123;</span><br><span class="line">  execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   被注解的方法与其他的方法没有什么区别，在上面的例子中，注解@Test可以与任何修饰符共同作用与方法，例如public，static或者是void。</p>
<h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><p>   看看@Test的注解类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.mindview.atunit;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>   注解类其实是一个空的接口，在定义注解时，会需要一些元注解(meta-annotation)，如@Target和@Retention。</p>
<ul>
<li><p>@Target:  用来定义你的注解将应用于什么地方(打比方是一个方法或者是一个域)。</p>
</li>
<li><p>@Retention:  用来定义该注解在哪一个级别可用，在源码中(SOURCE)，类文件(CLASS)或者运行时(RUNTIME)。</p>
<p>网上记载: 在注解中，一般都会包含一些元素以表示某些值，当分析处理注解时，程序或者是工具可以利用这些值。注解的元素看起来像接口的方法，唯一的区别是你可以为其指定默认值。没有元素的注解称为 “标记注解”，例如上面的@Test。<br>下面是一个简单的注解，我们可以用它来跟踪一个项目中的用例，如果一个方法或一组方法实现了某个用例的需求，那么程序员可以为此方法加上该注解。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UseCase&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，id和description类似方法定义。由于编译器会对id进行类型检查，因此将用例文档的追踪数据库与源码相关联是可靠的。description元素有一个default值，如果在注解某个方法时没有给出description的值，则该注解的处理器就会使用此元素的默认值。<br>在下面的类中三个方法被注解为用例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassworUtils</span></span>&#123;</span><br><span class="line">  <span class="meta">@UseCase</span>(id=<span class="number">47</span>,description = <span class="string">"Passwords must contain at least one numeric"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validatePassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (passwor.matches(<span class="string">"\\w*\\d\\w*"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@UseCase</span>(id = <span class="number">48</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">encryptPassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(password).reverse().toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@UseCase</span>(id =<span class="number">49</span>,description = <span class="string">"New passwords can't equal previously used ones"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkForNewPassword</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  List&lt;String&gt;prevPasswords,String password</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !prevPasswords.contains(password);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   注解的元素在使用时表现为名一值对的形式，并需要置于@UseCase声明之后的括号内。在encryptPassword()方法的注解中，并没有给出description元素的值，因此，在UseCase的注解处理器分析这个类时会使用该元素的默认值。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@Target</td>
<td>表示该注解可以用于什么地方。可能的ElementType参数包括包括: CONSTRUTOR: 构造器的声明。FIELD:域声明(包括enum实例)。LOCAL_VARABLE: 局部变量声明。METHOD:方法声明。PACKAGE:包声明。PARAMETER:参数声明。TYPE:类，接口(注解类型)或enum声明</td>
</tr>
<tr>
<td>@Retention</td>
<td>表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括:SOURCE: 注解将被编译器丢弃。CLASS:注解在class文件中用，但会被jvm丢弃。RUNTIME: vm运行将在运行期也保留注解，因此可以通过反射机制读取注解的信息。</td>
</tr>
<tr>
<td>@Documented</td>
<td>将此注解包含在Javadoc中</td>
</tr>
<tr>
<td>@Inherited</td>
<td>允许子类继承父类中的方法</td>
</tr>
<tr>
<td>很多时候，我们主要是定义自己的注解，并编写自己的处理器来处理他们。</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>仓库地址</title>
    <url>/2019/11/26/hello-world/</url>
    <content><![CDATA[<p><a href="https://github.com/fankeyayun" target="_blank" rel="noopener">fankeyayun</a> This is my very first post.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
</search>
